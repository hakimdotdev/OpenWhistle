@page
@using OpenWhistle.Models
@model DashboardModel
@{
ViewData["Title"] = "Dashboard";
}

<div class="container mx-auto p-4">
    <div class="grid grid-cols-4 gap-4 mb-4">
        <div class="bg-white rounded-lg p-4 shadow cursor-pointer hover:shadow-lg" onclick="location.href='/reports?status=Open'">
            <div class="text-gray-500">Open Reports</div>
            <div class="text-3xl font-bold">@Model.OpenReportsCount</div>
        </div>
        <div class="bg-white rounded-lg p-4 shadow cursor-pointer hover:shadow-lg" onclick="location.href='/reports?status=Unopened'">
            <div class="text-gray-500">Unopened Reports</div>
            <div class="text-3xl font-bold">@Model.UnopenedReportsCount</div>
        </div>
        <div class="bg-white rounded-lg p-4 shadow cursor-pointer hover:shadow-lg" onclick="location.href='/reports?status=ConfirmedReception'">
            <div class="text-gray-500">Confirmed Reception</div>
            <div class="text-3xl font-bold">@Model.ConfirmedReceptionCount</div>
        </div>
        <div class="bg-white rounded-lg p-4 shadow cursor-pointer hover:shadow-lg" onclick="location.href='/reports?status=WithoutActions'">
            <div class="text-gray-500">Reports Without Actions</div>
            <div class="text-3xl font-bold">@Model.ReportsWithoutActionsCount</div>
        </div>
    </div>

    <div class="grid grid-cols-2 gap-4 mb-4">
        <div class="bg-white rounded-lg p-4 shadow">
            <div class="text-gray-500 mb-2">Upcoming Deadlines</div>
            <ul>
                @foreach (var report in Model.UpcomingDeadlines)
                {
                <li class="flex justify-between items-center mb-2">
                    <div>
                        <div class="font-bold">@report.Id</div>
                        <div class="text-gray-500">@report.Description</div>
                    </div>
                    <div>@report.Deadline.ToString("dd. MMMM yyyy")</div>
                </li>
                }
            </ul>
        </div>
        <div class="bg-white rounded-lg p-4 shadow">
            <div class="text-gray-500 mb-2">History</div>
            <ul>
                @foreach (var item in Model.HistoryItems)
                {
                <li class="flex justify-between items-center mb-2">
                    <div class="font-bold">@item.Id</div>
                    <div>
                        <div>@item.DateCreated.ToString("dd. MMMM yyyy")</div>
                        <div class="text-gray-500 text-sm">@item.DateCreated.ToString("HH:mm")</div>
                    </div>
                </li>
                }
            </ul>
        </div>
    </div>
    @{
    int currentPage = Model.Reports.CurrentPage;
    int pageSize = Model.Reports.PageSize;
    int totalReports = Model.Reports.Count;
    int totalPages = (int)Math.Ceiling((double)totalReports / pageSize);
    }

    <div class="bg-white rounded-lg p-4 shadow">
        <div class="text-gray-500 mb-2">Reports</div>
        <div class="overflow-x-auto">
            <table class="min-w-full bg-white">
                <thead>
                <tr>
                    <th class="text-left py-3 px-4 text-gray-600 font-medium">Report</th>
                    <th class="text-left py-3 px-4 text-gray-600 font-medium">Assigned</th>
                    <th class="text-left py-3 px-4 text-gray-600 font-medium">Deadline</th>
                    <th class="text-left py-3 px-4 text-gray-600 font-medium">Status</th>
                </tr>
                </thead>
                <tbody class="text-gray-700">
                @foreach (var report in Model.Reports)
                {
                <tr class="hover:bg-gray-100 cursor-pointer" onclick="location.href='/report/details/@report.Id'">
                    <td class="text-left py-3 px-4">@report.Id</td>
                    <td class="text-left py-3 px-4">@report.AssignedTo</td>
                    <td class="text-left py-3 px-4">@report.Deadline.ToString("dd. MMMM yyyy")</td>
                    <td class="text-left py-3 px-4">
                        <div class="progress-container">
                            @{
                            var statusSteps = Enum.GetValues(typeof(ReportStatus)).Cast<ReportStatus>().ToList();
                            var currentStatusIndex = statusSteps.IndexOf(report.Status);
                            }
                            @for (int i = 0; i < statusSteps.Count; i++)
                            {
                            var step = statusSteps[i];
                            var isActive = i <= currentStatusIndex;
                            <span class="progress-step @(isActive ? "active" : "")">
                                        @Html.Raw(GetIconForStatus(step))
                                    </span>
                            @if (i < statusSteps.Count - 1)
                            {
                            <span class="progress-separator @(isActive ? "active" : "")"></span>
                            }
                            }
                        </div>
                    </td>
                </tr>
                }
                </tbody>
            </table>
        </div>
        <!-- Pagination Controls -->
        <div class="mt-4 flex justify-between items-center">
            <a asp-page="./Index" asp-route-pageIndex="@(Model.Reports.CurrentPage - 1)" class="@(Model.Reports.HasPreviousPage ? "" : "disabled")">Previous</a>
            <span class="text-gray-600">Page @Model.Reports.CurrentPage of @Model.Reports.TotalPages</span>
            <a asp-page="./Index" asp-route-pageIndex="@(Model.Reports.CurrentPage + 1)" class="@(Model.Reports.HasNextPage ? "" : "disabled")">Next</a>
        </div>



    </div>

    <style>
        .progress-container {
            display: flex;
            align-items: center;
        }
        .progress-step {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: #8f8f93;
        }
        .progress-step.active {
            background-color: #50555e;
            color: white;
        }
        .progress-separator {
            width: 40px;
            height: 4px;
            background-color: #8f8f93;
            margin: 0 4px;
        }
        .progress-separator.active {
            background-color: #50555e;
        }
        .cursor-pointer {
            cursor: pointer;
        }
        .hover\:bg-gray-100:hover {
            background-color: #f7fafc;
        }
        .hover\:shadow-lg:hover {
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
    </style>

    @functions {
    private string GetIconForStatus(ReportStatus status)
    {
    return status switch
    {
    ReportStatus.Received => @"
                    <svg class='h-6 w-6 text-white' width='24' height='24' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'>
                        <path stroke='none' d='M0 0h24v24H0z'/>  
                        <rect x='3' y='5' width='18' height='14' rx='2' />  
                        <polyline points='3 7 12 13 21 7' />
                    </svg>",
    ReportStatus.Read => @"
                    <svg class='h-6 w-6 text-white' width='24' height='24' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'>
                        <path stroke='none' d='M0 0h24v24H0z'/>  
                        <polyline points='3 9 12 15 21 9 12 3 3 9' />  
                        <path d='M21 9v10a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-10' />  
                        <line x1='3' y1='19' x2='9' y2='13' />  
                        <line x1='15' y1='13' x2='21' y2='19' />
                    </svg>",
    ReportStatus.Acknowledged => @"
                    <svg class='h-6 w-6 text-white' width='24' height='24' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'>
                        <path stroke='none' d='M0 0h24v24H0z'/>  
                        <path d='M14 3v4a1 1 0 0 0 1 1h4' />  
                        <path d='M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z' />  
                        <path d='M9 15l2 2l4 -4' />
                    </svg>",
    ReportStatus.ActionTaken => @"
                    <svg class='h-6 w-6 text-white' width='24' height='24' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'>
                        <path stroke='none' d='M0 0h24v24H0z'/>  
                        <path d='M7 12l5 5l10 -10' />  
                        <path d='M2 12l5 5m5 -5l5 -5' />
                    </svg>",
    ReportStatus.Completed => @"
                    <svg class='h-6 w-6 text-white' width='24' height='24' viewBox='0 0 24 24' stroke-width='2' stroke='currentColor' fill='none' stroke-linecap='round' stroke-linejoin='round'>
                        <path stroke='none' d='M0 0h24v24H0z'/>  
                        <path d='M5 12l5 5l10 -10' />
                    </svg>",
    _ => ""
    };
    }
    }
</div>
